import pytest
from unittest.mock import MagicMock, patch
from api.openai_service import OpenAIService
from core.exercise_manager import ExerciseManager


@pytest.fixture
def mock_openai_service():
    """
    Fixture to create a mocked OpenAIService instance.
    """
    service = MagicMock(spec=OpenAIService)
    service.request_response_to_openai.return_value = "Mocked response from OpenAI"
    return service


def test_execute_prompt(mock_openai_service):
    """
    Test the execute_prompt method in ExerciseManager.
    """
    manager = ExerciseManager(openai_service=mock_openai_service)
    prompt = {
        "system_message": "You are a system.",
        "user_message": "Generate something interesting.",
    }

    response = manager.execute_prompt(prompt)

    mock_openai_service.request_response_to_openai.assert_called_once_with([
        {"role": "system", "content": "You are a system."},
        {"role": "user", "content": "Generate something interesting."},
    ])
    assert response == "Mocked response from OpenAI"


@patch("api.factories.prompt_exercise_factory.PromptExerciseFactory.create_prompt_exercise")
def test_generate_exercise(mock_factory, mock_openai_service):
    """
    Test the generate_exercise method in ExerciseManager.
    """
    # Mock the strategy returned by the factory
    mock_strategy = MagicMock()
    mock_strategy.generate_prompt.return_value = {
        "system_message": "Mocked system message for exercise.",
        "user_message": "Mocked user message for exercise.",
    }
    mock_factory.return_value = mock_strategy

    manager = ExerciseManager(openai_service=mock_openai_service)

    subject = "OOP"
    language = "Python"
    level = "beginner"
    response = manager.generate_exercise(subject, language, level)

    mock_factory.assert_called_once_with(level)
    mock_strategy.generate_prompt.assert_called_once_with(subject, language)
    mock_openai_service.request_response_to_openai.assert_called_once_with([
        {"role": "system", "content": "Mocked system message for exercise."},
        {"role": "user", "content": "Mocked user message for exercise."},
    ])
    assert response == "Mocked response from OpenAI"


@patch("api.analyzercode_prompt.AnalyzerCodePrompt.generate_prompt")
def test_analyze_code(mock_generate_prompt, mock_openai_service):
    """
    Test the analyze_code method in ExerciseManager.
    """
    # Mock the prompt generated by AnalyzerCodePrompt
    mock_generate_prompt.return_value = {
        "system_message": "Mocked system message for code analysis.",
        "user_message": "Mocked user message for code analysis.",
    }

    manager = ExerciseManager(openai_service=mock_openai_service)

    file_content = "def test_function(): pass"
    response = manager.analyze_code(file_content)

    mock_generate_prompt.assert_called_once_with(file_content)
    mock_openai_service.request_response_to_openai.assert_called_once_with([
        {"role": "system", "content": "Mocked system message for code analysis."},
        {"role": "user", "content": "Mocked user message for code analysis."},
    ])
    assert response == "Mocked response from OpenAI"
